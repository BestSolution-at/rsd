// Generated by RSD - Do not modify
import { isPatchableUnion, type PatchableUnion, PatchableUnionFromJSON, type PatchableUnionPatch, PatchableUnionToJSON } from './PatchableUnion.js';
import { checkOptProp, checkProp, createTypedArrayGuard, isNull, isRecord, isUndefined, type ListMergeAddUpdateRemove, type ListReplace, propMappedListValue, propMappedValue } from '../_type-utils.js';

export type PatchableRecordWithUnion = {
	readonly value: PatchableUnion;
	readonly value_Null: PatchableUnion | null;
	readonly value_Opt?: PatchableUnion;
	readonly value_Opt_Null?: PatchableUnion | null;
	readonly list: PatchableUnion[];
	readonly list_Null: PatchableUnion[] | null;
	readonly list_Opt?: PatchableUnion[];
	readonly list_Opt_Null?: PatchableUnion[] | null;
};

export function isPatchableRecordWithUnion(value: unknown): value is PatchableRecordWithUnion {
	return isRecord(value) &&
		checkProp(value, 'value', isPatchableUnion) &&
		(isNull(value.value_Null) || checkProp(value, 'value_Null', isPatchableUnion)) &&
		checkOptProp(value, 'value_Opt', isPatchableUnion) &&
		(isNull(value.value_Opt_Null) || checkOptProp(value, 'value_Opt_Null', isPatchableUnion)) &&
		checkProp(value, 'list', createTypedArrayGuard(isPatchableUnion)) &&
		(isNull(value.list_Null) || checkProp(value, 'list_Null', createTypedArrayGuard(isPatchableUnion))) &&
		checkOptProp(value, 'list_Opt', createTypedArrayGuard(isPatchableUnion)) &&
		(isNull(value.list_Opt_Null) || checkOptProp(value, 'list_Opt_Null', createTypedArrayGuard(isPatchableUnion)));
}

export function PatchableRecordWithUnionFromJSON($value: Record<string, unknown>): PatchableRecordWithUnion {
	const value = propMappedValue('value', $value, isRecord, PatchableUnionFromJSON);
	const value_Null = propMappedValue('value_Null', $value, isRecord, PatchableUnionFromJSON, 'null');
	const value_Opt = propMappedValue('value_Opt', $value, isRecord, PatchableUnionFromJSON, 'optional');
	const value_Opt_Null = propMappedValue('value_Opt_Null', $value, isRecord, PatchableUnionFromJSON, 'optional_null');
	const list = propMappedListValue('list', $value, isRecord, PatchableUnionFromJSON);
	const list_Null = propMappedListValue('list_Null', $value, isRecord, PatchableUnionFromJSON, 'null');
	const list_Opt = propMappedListValue('list_Opt', $value, isRecord, PatchableUnionFromJSON, 'optional');
	const list_Opt_Null = propMappedListValue('list_Opt_Null', $value, isRecord, PatchableUnionFromJSON, 'optional_null');
	return {
		value,
		value_Null,
		value_Opt,
		value_Opt_Null,
		list,
		list_Null,
		list_Opt,
		list_Opt_Null,
	};
}

export function PatchableRecordWithUnionToJSON($value: PatchableRecordWithUnion): Record<string, unknown> {
	const value = PatchableUnionToJSON($value.value);
	const value_Null = isNull($value.value_Null) ? null : PatchableUnionToJSON($value.value_Null);
	const value_Opt = isUndefined($value.value_Opt) ? undefined : PatchableUnionToJSON($value.value_Opt);
	const value_Opt_Null = isUndefined($value.value_Opt_Null) || isNull($value.value_Opt_Null) ? $value.value_Opt_Null : PatchableUnionToJSON($value.value_Opt_Null);
	const list = $value.list.map(PatchableUnionToJSON);
	const list_Null = isNull($value.list_Null) ? null : $value.list_Null.map(PatchableUnionToJSON);
	const list_Opt = isUndefined($value.list_Opt) ? undefined : $value.list_Opt.map(PatchableUnionToJSON);
	const list_Opt_Null = isUndefined($value.list_Opt_Null) || isNull($value.list_Opt_Null) ? $value.list_Opt_Null : $value.list_Opt_Null.map(PatchableUnionToJSON);

	return {
		value,
		value_Null,
		value_Opt,
		value_Opt_Null,
		list,
		list_Null,
		list_Opt,
		list_Opt_Null,
	};
}

type $ListReplace = ListReplace<PatchableUnionPatch>;
type $ListMerge = ListMergeAddUpdateRemove<PatchableUnionPatch, PatchableUnionPatch,string>;
type $ListPatch = $ListReplace | $ListMerge;

type $List_NullReplace = ListReplace<PatchableUnionPatch>;
type $List_NullMerge = ListMergeAddUpdateRemove<PatchableUnionPatch, PatchableUnionPatch,string>;
type $List_NullPatch = $List_NullReplace | $List_NullMerge;

type $List_OptReplace = ListReplace<PatchableUnionPatch>;
type $List_OptMerge = ListMergeAddUpdateRemove<PatchableUnionPatch, PatchableUnionPatch,string>;
type $List_OptPatch = $List_OptReplace | $List_OptMerge;

type $List_Opt_NullReplace = ListReplace<PatchableUnionPatch>;
type $List_Opt_NullMerge = ListMergeAddUpdateRemove<PatchableUnionPatch, PatchableUnionPatch,string>;
type $List_Opt_NullPatch = $List_Opt_NullReplace | $List_Opt_NullMerge;

type $ValuePatch = PatchableUnion | PatchableUnionPatch;
type $Value_NullPatch = PatchableUnion | PatchableUnionPatch;
type $Value_OptPatch = PatchableUnion | PatchableUnionPatch;
type $Value_Opt_NullPatch = PatchableUnion | PatchableUnionPatch;

export type PatchableRecordWithUnionPatch = {
	readonly value?: $ValuePatch;
	readonly value_Null?: $Value_NullPatch | null;
	readonly value_Opt?: $Value_OptPatch | null;
	readonly value_Opt_Null?: $Value_Opt_NullPatch | null;
	readonly list?: $ListPatch;
	readonly list_Null?: $List_NullPatch | null;
	readonly list_Opt?: $List_OptPatch | null;
	readonly list_Opt_Null?: $List_Opt_NullPatch | null;
};

export function isPatchableRecordWithUnionPatch(value: unknown): value is PatchableRecordWithUnionPatch {
	return isRecord(value) &&
		checkOptProp(value, 'value', isPatchableUnion) &&
		(isNull(value.value_Null) || checkOptProp(value, 'value_Null', isPatchableUnion)) &&
		(isNull(value.value_Opt) || checkOptProp(value, 'value_Opt', isPatchableUnion)) &&
		(isNull(value.value_Opt_Null) || checkOptProp(value, 'value_Opt_Null', isPatchableUnion)) &&
		checkOptProp(value, 'list', createTypedArrayGuard(isPatchableUnion)) &&
		(isNull(value.list_Null) || checkOptProp(value, 'list_Null', createTypedArrayGuard(isPatchableUnion))) &&
		(isNull(value.list_Opt) || checkOptProp(value, 'list_Opt', createTypedArrayGuard(isPatchableUnion))) &&
		(isNull(value.list_Opt_Null) || checkOptProp(value, 'list_Opt_Null', createTypedArrayGuard(isPatchableUnion)));
}

export function PatchableRecordWithUnionPatchFromJSON($value: Record<string, unknown>): PatchableRecordWithUnionPatch {
	const value = propMappedValue('value', $value, isRecord, PatchableUnionFromJSON, 'optional');
	const value_Null = propMappedValue('value_Null', $value, isRecord, PatchableUnionFromJSON, 'optional_null');
	const value_Opt = propMappedValue('value_Opt', $value, isRecord, PatchableUnionFromJSON, 'optional_null');
	const value_Opt_Null = propMappedValue('value_Opt_Null', $value, isRecord, PatchableUnionFromJSON, 'optional_null');
	const list = propMappedListValue('list', $value, isRecord, PatchableUnionFromJSON, 'optional');
	const list_Null = propMappedListValue('list_Null', $value, isRecord, PatchableUnionFromJSON, 'optional_null');
	const list_Opt = propMappedListValue('list_Opt', $value, isRecord, PatchableUnionFromJSON, 'optional_null');
	const list_Opt_Null = propMappedListValue('list_Opt_Null', $value, isRecord, PatchableUnionFromJSON, 'optional_null');
	return {
		value,
		value_Null,
		value_Opt,
		value_Opt_Null,
		list,
		list_Null,
		list_Opt,
		list_Opt_Null,
	};
}

export function PatchableRecordWithUnionPatchToJSON($value: PatchableRecordWithUnionPatch): Record<string, unknown> {
	const value = isUndefined($value.value) ? undefined : PatchableUnionToJSON($value.value);
	const value_Null = isUndefined($value.value_Null) || isNull($value.value_Null) ? $value.value_Null : PatchableUnionToJSON($value.value_Null);
	const value_Opt = isUndefined($value.value_Opt) || isNull($value.value_Opt) ? $value.value_Opt : PatchableUnionToJSON($value.value_Opt);
	const value_Opt_Null = isUndefined($value.value_Opt_Null) || isNull($value.value_Opt_Null) ? $value.value_Opt_Null : PatchableUnionToJSON($value.value_Opt_Null);
	const list = isUndefined($value.list) ? undefined : $value.list.map(PatchableUnionToJSON);
	const list_Null = isUndefined($value.list_Null) || isNull($value.list_Null) ? $value.list_Null : $value.list_Null.map(PatchableUnionToJSON);
	const list_Opt = isUndefined($value.list_Opt) || isNull($value.list_Opt) ? $value.list_Opt : $value.list_Opt.map(PatchableUnionToJSON);
	const list_Opt_Null = isUndefined($value.list_Opt_Null) || isNull($value.list_Opt_Null) ? $value.list_Opt_Null : $value.list_Opt_Null.map(PatchableUnionToJSON);

	return {
		value,
		value_Null,
		value_Opt,
		value_Opt_Null,
		list,
		list_Null,
		list_Opt,
		list_Opt_Null,
	};
}

