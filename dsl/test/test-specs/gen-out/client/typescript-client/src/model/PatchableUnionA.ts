// Generated by RSD - Do not modify
import { checkOptProp, checkProp, createIsStringTypeGuard, isRecord, isString, propValue } from '../_type-utils.js';

export type PatchableUnionA = {
	'@type': 'union-a',
	readonly shared: string;
	readonly valueA: string;
};

export function isPatchableUnionA(value: unknown): value is PatchableUnionA {
	return isRecord(value) &&
		checkProp(value, '@type', createIsStringTypeGuard('union-a')) &&
		checkProp(value, 'shared', isString) &&
		checkProp(value, 'valueA', isString);
}

export function PatchableUnionAFromJSON($value: Record<string, unknown>): PatchableUnionA {
	const shared = propValue('shared', $value, isString);
	const valueA = propValue('valueA', $value, isString);
	return {
		'@type': 'union-a',
		shared,
		valueA,
	};
}

export function PatchableUnionAToJSON($value: PatchableUnionA): Record<string, unknown> {
	const shared = $value.shared;
	const valueA = $value.valueA;

	return {
		'@type': 'union-a',
		shared,
		valueA,
	};
}

export type PatchableUnionAPatch = {
	'@type': 'union-a-patch',
	readonly shared?: string;
	readonly valueA?: string;
};

export function isPatchableUnionAPatch(value: unknown): value is PatchableUnionAPatch {
	return isRecord(value) &&
		checkProp(value, '@type', createIsStringTypeGuard('union-a')) &&
		 &&
		checkOptProp(value, 'shared', isString) &&
		checkOptProp(value, 'valueA', isString);
}

export function PatchableUnionAPatchFromJSON($value: Record<string, unknown>): PatchableUnionAPatch {
	const shared = propValue('shared', $value, isString, 'optional');
	const valueA = propValue('valueA', $value, isString, 'optional');
	return {
		'@type': 'union-a-patch',
		shared,
		valueA,
	};
}

export function PatchableUnionAPatchToJSON($value: PatchableUnionAPatch): Record<string, unknown> {
	const shared = $value.shared;
	const valueA = $value.valueA;

	return {
		'@type': 'union-a-patch',
		shared,
		valueA,
	};
}

