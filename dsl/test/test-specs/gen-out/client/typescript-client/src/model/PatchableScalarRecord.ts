// Generated by RSD - Do not modify
import { checkOptProp, checkProp, createReplaceAddRemoveGuard, createTypedArrayGuard, isNull, isRecord, isString, type ListMergeAddRemove, type ListReplace, propListValue, propValue } from '../_type-utils.js';

export type PatchableScalarRecord = {
	readonly key: string;
	readonly version: string;
	readonly value: string;
	readonly value_Null: string | null;
	readonly value_Opt?: string;
	readonly value_Opt_Null?: string | null;
	readonly list: string[];
	readonly list_Null: string[] | null;
	readonly list_Opt?: string[];
	readonly list_Opt_Null?: string[] | null;
};

export function isPatchableScalarRecord(value: unknown): value is PatchableScalarRecord {
	return isRecord(value) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'version', isString) &&
		checkProp(value, 'value', isString) &&
		(checkProp(value, 'value_Null', isNull) || checkProp(value, 'value_Null', isString)) &&
		checkOptProp(value, 'value_Opt', isString) &&
		(checkOptProp(value, 'value_Opt_Null', isNull) || checkOptProp(value, 'value_Opt_Null', isString)) &&
		checkProp(value, 'list', createTypedArrayGuard(isString)) &&
		(checkProp(value, 'list_Null', isNull) || checkProp(value, 'list_Null', createTypedArrayGuard(isString))) &&
		checkOptProp(value, 'list_Opt', createTypedArrayGuard(isString)) &&
		(checkOptProp(value, 'list_Opt_Null', isNull) || checkOptProp(value, 'list_Opt_Null', createTypedArrayGuard(isString)));
}

export function PatchableScalarRecordFromJSON($value: Record<string, unknown>): PatchableScalarRecord {
	const key = propValue('key', $value, isString);
	const version = propValue('version', $value, isString);
	const value = propValue('value', $value, isString);
	const value_Null = propValue('value_Null', $value, isString, 'null');
	const value_Opt = propValue('value_Opt', $value, isString, 'optional');
	const value_Opt_Null = propValue('value_Opt_Null', $value, isString, 'optional_null');
	const list = propListValue('list', $value, isString);
	const list_Null = propListValue('list_Null', $value, isString, 'null');
	const list_Opt = propListValue('list_Opt', $value, isString, 'optional');
	const list_Opt_Null = propListValue('list_Opt_Null', $value, isString, 'optional_null');
	return {
		key,
		version,
		value,
		value_Null,
		value_Opt,
		value_Opt_Null,
		list,
		list_Null,
		list_Opt,
		list_Opt_Null,
	};
}

export function PatchableScalarRecordToJSON($value: PatchableScalarRecord): Record<string, unknown> {
	const key = $value.key;
	const version = $value.version;
	const value = $value.value;
	const value_Null = $value.value_Null;
	const value_Opt = $value.value_Opt;
	const value_Opt_Null = $value.value_Opt_Null;
	const list = $value.list;
	const list_Null = $value.list_Null;
	const list_Opt = $value.list_Opt;
	const list_Opt_Null = $value.list_Opt_Null;

	return {
		key,
		version,
		value,
		value_Null,
		value_Opt,
		value_Opt_Null,
		list,
		list_Null,
		list_Opt,
		list_Opt_Null,
	};
}

type $ListReplace = ListReplace<string>;
type $ListMerge = ListMergeAddRemove<string, string>;
type $ListPatch = $ListReplace | $ListMerge;

type $List_NullReplace = ListReplace<string>;
type $List_NullMerge = ListMergeAddRemove<string, string>;
type $List_NullPatch = $List_NullReplace | $List_NullMerge;

type $List_OptReplace = ListReplace<string>;
type $List_OptMerge = ListMergeAddRemove<string, string>;
type $List_OptPatch = $List_OptReplace | $List_OptMerge;

type $List_Opt_NullReplace = ListReplace<string>;
type $List_Opt_NullMerge = ListMergeAddRemove<string, string>;
type $List_Opt_NullPatch = $List_Opt_NullReplace | $List_Opt_NullMerge;

export type PatchableScalarRecordPatch = {
	readonly key: string;
	readonly version: string;
	readonly value?: string;
	readonly value_Null?: string | null;
	readonly value_Opt?: string | null;
	readonly value_Opt_Null?: string | null;
	readonly list?: $ListPatch;
	readonly list_Null?: $List_NullPatch | null;
	readonly list_Opt?: $List_OptPatch | null;
	readonly list_Opt_Null?: $List_Opt_NullPatch | null;
};

export function isPatchableScalarRecordPatch(value: unknown): value is PatchableScalarRecordPatch {
	return isRecord(value) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'version', isString) &&
		checkOptProp(value, 'value', isString) &&
		(checkOptProp(value, 'value_Null', isNull) || checkOptProp(value, 'value_Null', isString)) &&
		(checkOptProp(value, 'value_Opt', isNull) || checkOptProp(value, 'value_Opt', isString)) &&
		(checkOptProp(value, 'value_Opt_Null', isNull) || checkOptProp(value, 'value_Opt_Null', isString)) &&
		checkOptProp(value, 'list', createReplaceAddRemoveGuard(isString)) &&
		(checkOptProp(value, 'list_Null', isNull) || checkOptProp(value, 'list_Null', createReplaceAddRemoveGuard(isString))) &&
		(checkOptProp(value, 'list_Opt', isNull) || checkOptProp(value, 'list_Opt', createReplaceAddRemoveGuard(isString))) &&
		(checkOptProp(value, 'list_Opt_Null', isNull) || checkOptProp(value, 'list_Opt_Null', createReplaceAddRemoveGuard(isString)));
}

export function PatchableScalarRecordPatchFromJSON($value: Record<string, unknown>): PatchableScalarRecordPatch {
	const key = propValue('key', $value, isString);
	const version = propValue('version', $value, isString);
	const value = propValue('value', $value, isString, 'optional');
	const value_Null = propValue('value_Null', $value, isString, 'optional_null');
	const value_Opt = propValue('value_Opt', $value, isString, 'optional_null');
	const value_Opt_Null = propValue('value_Opt_Null', $value, isString, 'optional_null');
	const list = propListValue('list', $value, isString, 'optional');
	const list_Null = propListValue('list_Null', $value, isString, 'optional_null');
	const list_Opt = propListValue('list_Opt', $value, isString, 'optional_null');
	const list_Opt_Null = propListValue('list_Opt_Null', $value, isString, 'optional_null');
	return {
		key,
		version,
		value,
		value_Null,
		value_Opt,
		value_Opt_Null,
		list,
		list_Null,
		list_Opt,
		list_Opt_Null,
	};
}

export function PatchableScalarRecordPatchToJSON($value: PatchableScalarRecordPatch): Record<string, unknown> {
	const key = $value.key;
	const version = $value.version;
	const value = $value.value;
	const value_Null = $value.value_Null;
	const value_Opt = $value.value_Opt;
	const value_Opt_Null = $value.value_Opt_Null;
	const list = $value.list;
	const list_Null = $value.list_Null;
	const list_Opt = $value.list_Opt;
	const list_Opt_Null = $value.list_Opt_Null;

	return {
		key,
		version,
		value,
		value_Null,
		value_Opt,
		value_Opt_Null,
		list,
		list_Null,
		list_Opt,
		list_Opt_Null,
	};
}

