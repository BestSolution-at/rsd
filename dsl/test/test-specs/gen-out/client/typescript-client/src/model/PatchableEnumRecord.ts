// Generated by RSD - Do not modify
import { isSampleEnum, type SampleEnum } from './SampleEnum.js';
import { checkOptProp, checkProp, createTypedArrayGuard, isNull, isRecord, type ListMergeAddRemove, type ListReplace, propListValue, propValue } from '../_type-utils.js';

export type PatchableEnumRecord = {
	readonly value: SampleEnum;
	readonly value_Null: SampleEnum | null;
	readonly value_Opt?: SampleEnum;
	readonly value_Opt_Null?: SampleEnum | null;
	readonly list: SampleEnum[];
	readonly list_Null: SampleEnum[] | null;
	readonly list_Opt?: SampleEnum[];
	readonly list_Opt_Null?: SampleEnum[] | null;
};

export function isPatchableEnumRecord(value: unknown): value is PatchableEnumRecord {
	return isRecord(value) &&
		checkProp(value, 'value', isSampleEnum) &&
		(isNull(value.value_Null) || checkProp(value, 'value_Null', isSampleEnum)) &&
		checkOptProp(value, 'value_Opt', isSampleEnum) &&
		(isNull(value.value_Opt_Null) || checkOptProp(value, 'value_Opt_Null', isSampleEnum)) &&
		checkProp(value, 'list', createTypedArrayGuard(isSampleEnum)) &&
		(isNull(value.list_Null) || checkProp(value, 'list_Null', createTypedArrayGuard(isSampleEnum))) &&
		checkOptProp(value, 'list_Opt', createTypedArrayGuard(isSampleEnum)) &&
		(isNull(value.list_Opt_Null) || checkOptProp(value, 'list_Opt_Null', createTypedArrayGuard(isSampleEnum)));
}

export function PatchableEnumRecordFromJSON($value: Record<string, unknown>): PatchableEnumRecord {
	const value = propValue('value', $value, isSampleEnum);
	const value_Null = propValue('value_Null', $value, isSampleEnum, 'null');
	const value_Opt = propValue('value_Opt', $value, isSampleEnum, 'optional');
	const value_Opt_Null = propValue('value_Opt_Null', $value, isSampleEnum, 'optional_null');
	const list = propListValue('list', $value, isSampleEnum);
	const list_Null = propListValue('list_Null', $value, isSampleEnum, 'null');
	const list_Opt = propListValue('list_Opt', $value, isSampleEnum, 'optional');
	const list_Opt_Null = propListValue('list_Opt_Null', $value, isSampleEnum, 'optional_null');
	return {
		value,
		value_Null,
		value_Opt,
		value_Opt_Null,
		list,
		list_Null,
		list_Opt,
		list_Opt_Null,
	};
}

export function PatchableEnumRecordToJSON($value: PatchableEnumRecord): Record<string, unknown> {
	const value = $value.value;
	const value_Null = $value.value_Null;
	const value_Opt = $value.value_Opt;
	const value_Opt_Null = $value.value_Opt_Null;
	const list = $value.list;
	const list_Null = $value.list_Null;
	const list_Opt = $value.list_Opt;
	const list_Opt_Null = $value.list_Opt_Null;

	return {
		value,
		value_Null,
		value_Opt,
		value_Opt_Null,
		list,
		list_Null,
		list_Opt,
		list_Opt_Null,
	};
}

type $ListReplace = ListReplace<SampleEnum>;
type $ListMerge = ListMergeAddRemove<SampleEnum, SampleEnum>;
type $ListPatch = $ListReplace | $ListMerge;

type $List_NullReplace = ListReplace<SampleEnum>;
type $List_NullMerge = ListMergeAddRemove<SampleEnum, SampleEnum>;
type $List_NullPatch = $List_NullReplace | $List_NullMerge;

type $List_OptReplace = ListReplace<SampleEnum>;
type $List_OptMerge = ListMergeAddRemove<SampleEnum, SampleEnum>;
type $List_OptPatch = $List_OptReplace | $List_OptMerge;

type $List_Opt_NullReplace = ListReplace<SampleEnum>;
type $List_Opt_NullMerge = ListMergeAddRemove<SampleEnum, SampleEnum>;
type $List_Opt_NullPatch = $List_Opt_NullReplace | $List_Opt_NullMerge;

export type PatchableEnumRecordPatch = {
	readonly value?: SampleEnum;
	readonly value_Null?: SampleEnum | null;
	readonly value_Opt?: SampleEnum | null;
	readonly value_Opt_Null?: SampleEnum | null;
	readonly list?: $ListPatch;
	readonly list_Null?: $List_NullPatch | null;
	readonly list_Opt?: $List_OptPatch | null;
	readonly list_Opt_Null?: $List_Opt_NullPatch | null;
};

export function isPatchableEnumRecordPatch(value: unknown): value is PatchableEnumRecordPatch {
	return isRecord(value) &&
		checkOptProp(value, 'value', isSampleEnum) &&
		(isNull(value.value_Null) || checkOptProp(value, 'value_Null', isSampleEnum)) &&
		(isNull(value.value_Opt) || checkOptProp(value, 'value_Opt', isSampleEnum)) &&
		(isNull(value.value_Opt_Null) || checkOptProp(value, 'value_Opt_Null', isSampleEnum)) &&
		checkOptProp(value, 'list', createTypedArrayGuard(isSampleEnum)) &&
		(isNull(value.list_Null) || checkOptProp(value, 'list_Null', createTypedArrayGuard(isSampleEnum))) &&
		(isNull(value.list_Opt) || checkOptProp(value, 'list_Opt', createTypedArrayGuard(isSampleEnum))) &&
		(isNull(value.list_Opt_Null) || checkOptProp(value, 'list_Opt_Null', createTypedArrayGuard(isSampleEnum)));
}

export function PatchableEnumRecordPatchFromJSON($value: Record<string, unknown>): PatchableEnumRecordPatch {
	const value = propValue('value', $value, isSampleEnum, 'optional');
	const value_Null = propValue('value_Null', $value, isSampleEnum, 'optional_null');
	const value_Opt = propValue('value_Opt', $value, isSampleEnum, 'optional_null');
	const value_Opt_Null = propValue('value_Opt_Null', $value, isSampleEnum, 'optional_null');
	const list = propListValue('list', $value, isSampleEnum, 'optional');
	const list_Null = propListValue('list_Null', $value, isSampleEnum, 'optional_null');
	const list_Opt = propListValue('list_Opt', $value, isSampleEnum, 'optional_null');
	const list_Opt_Null = propListValue('list_Opt_Null', $value, isSampleEnum, 'optional_null');
	return {
		value,
		value_Null,
		value_Opt,
		value_Opt_Null,
		list,
		list_Null,
		list_Opt,
		list_Opt_Null,
	};
}

export function PatchableEnumRecordPatchToJSON($value: PatchableEnumRecordPatch): Record<string, unknown> {
	const value = $value.value;
	const value_Null = $value.value_Null;
	const value_Opt = $value.value_Opt;
	const value_Opt_Null = $value.value_Opt_Null;
	const list = $value.list;
	const list_Null = $value.list_Null;
	const list_Opt = $value.list_Opt;
	const list_Opt_Null = $value.list_Opt_Null;

	return {
		value,
		value_Null,
		value_Opt,
		value_Opt_Null,
		list,
		list_Null,
		list_Opt,
		list_Opt_Null,
	};
}

