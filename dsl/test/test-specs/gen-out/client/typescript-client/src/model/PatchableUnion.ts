// Generated by RSD - Do not modify
import { isPatchableUnionA, type PatchableUnionA, PatchableUnionAFromJSON, PatchableUnionAToJSON } from './PatchableUnionA.js';
import { isPatchableUnionB, type PatchableUnionB, PatchableUnionBFromJSON, PatchableUnionBToJSON } from './PatchableUnionB.js';
import { isString } from '../_type-utils.js';

export type PatchableUnion = PatchableUnionA | PatchableUnionB;

export function isPatchableUnion(value: unknown) {
	return isPatchableUnionA(value) || isPatchableUnionB(value);
}

export function PatchableUnionFromJSON(value: Record<string, unknown>): PatchableUnion {
	const descriminator = value['@type'];

	if(!isString(descriminator)) {
		throw new Error('No valid descriminator found');
	}
	switch(descriminator) {
		case 'union-a':
			return PatchableUnionAFromJSON(value);
		case 'union-b':
			return PatchableUnionBFromJSON(value);
		default:
			throw new Error(`Unknown descriminator "${descriminator}"`);
	}
}
export function PatchableUnionToJSON(value: PatchableUnion): Record<string, unknown> {
	const $desc = value['@type'];
	switch($desc) {
		case 'union-a':
			return PatchableUnionAToJSON(value);
		case 'union-b':
			return PatchableUnionBToJSON(value);
		default:
			throw new Error(`Unknown descriminator "${$desc}";`)
	}
}
