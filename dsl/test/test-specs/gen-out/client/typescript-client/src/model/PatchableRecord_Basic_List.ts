// Generated by RSD - Do not modify
import { checkOptProp, checkProp, createReplaceAddRemoveGuard, createTypedArrayGuard, isBoolean, isNumber, isRecord, isString, type ListMergeAddRemove, type ListReplace, propListValue, propValue } from '../_type-utils.js';

export type PatchableRecord_Basic_List = {
	readonly key: string;
	readonly version: string;
	readonly valueBoolean: boolean[];
	readonly valueShort: number[];
	readonly valueInt: number[];
	readonly valueLong: number[];
	readonly valueFloat: number[];
	readonly valueDouble: number[];
	readonly valueString: string[];
	readonly valueLocalDate: string[];
	readonly valueLocalDateTime: string[];
	readonly valueZonedDateTime: string[];
};

export function isPatchableRecord_Basic_List(value: unknown): value is PatchableRecord_Basic_List {
	return isRecord(value) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'version', isString) &&
		checkProp(value, 'valueBoolean', createTypedArrayGuard(isBoolean)) &&
		checkProp(value, 'valueShort', createTypedArrayGuard(isNumber)) &&
		checkProp(value, 'valueInt', createTypedArrayGuard(isNumber)) &&
		checkProp(value, 'valueLong', createTypedArrayGuard(isNumber)) &&
		checkProp(value, 'valueFloat', createTypedArrayGuard(isNumber)) &&
		checkProp(value, 'valueDouble', createTypedArrayGuard(isNumber)) &&
		checkProp(value, 'valueString', createTypedArrayGuard(isString)) &&
		checkProp(value, 'valueLocalDate', createTypedArrayGuard(isString)) &&
		checkProp(value, 'valueLocalDateTime', createTypedArrayGuard(isString)) &&
		checkProp(value, 'valueZonedDateTime', createTypedArrayGuard(isString));
}

export function PatchableRecord_Basic_ListFromJSON($value: Record<string, unknown>): PatchableRecord_Basic_List {
	const key = propValue('key', $value, isString);
	const version = propValue('version', $value, isString);
	const valueBoolean = propListValue('valueBoolean', $value, isBoolean);
	const valueShort = propListValue('valueShort', $value, isNumber);
	const valueInt = propListValue('valueInt', $value, isNumber);
	const valueLong = propListValue('valueLong', $value, isNumber);
	const valueFloat = propListValue('valueFloat', $value, isNumber);
	const valueDouble = propListValue('valueDouble', $value, isNumber);
	const valueString = propListValue('valueString', $value, isString);
	const valueLocalDate = propListValue('valueLocalDate', $value, isString);
	const valueLocalDateTime = propListValue('valueLocalDateTime', $value, isString);
	const valueZonedDateTime = propListValue('valueZonedDateTime', $value, isString);
	return {
		key,
		version,
		valueBoolean,
		valueShort,
		valueInt,
		valueLong,
		valueFloat,
		valueDouble,
		valueString,
		valueLocalDate,
		valueLocalDateTime,
		valueZonedDateTime,
	};
}

export function PatchableRecord_Basic_ListToJSON($value: PatchableRecord_Basic_List): Record<string, unknown> {
	const key = $value.key;
	const version = $value.version;
	const valueBoolean = $value.valueBoolean;
	const valueShort = $value.valueShort;
	const valueInt = $value.valueInt;
	const valueLong = $value.valueLong;
	const valueFloat = $value.valueFloat;
	const valueDouble = $value.valueDouble;
	const valueString = $value.valueString;
	const valueLocalDate = $value.valueLocalDate;
	const valueLocalDateTime = $value.valueLocalDateTime;
	const valueZonedDateTime = $value.valueZonedDateTime;

	return {
		key,
		version,
		valueBoolean,
		valueShort,
		valueInt,
		valueLong,
		valueFloat,
		valueDouble,
		valueString,
		valueLocalDate,
		valueLocalDateTime,
		valueZonedDateTime,
	};
}

type $ValueBooleanReplace = ListReplace<boolean>;
type $ValueBooleanMerge = ListMergeAddRemove<boolean, boolean>;
type $ValueBooleanPatch = $ValueBooleanReplace | $ValueBooleanMerge;

type $ValueShortReplace = ListReplace<number>;
type $ValueShortMerge = ListMergeAddRemove<number, number>;
type $ValueShortPatch = $ValueShortReplace | $ValueShortMerge;

type $ValueIntReplace = ListReplace<number>;
type $ValueIntMerge = ListMergeAddRemove<number, number>;
type $ValueIntPatch = $ValueIntReplace | $ValueIntMerge;

type $ValueLongReplace = ListReplace<number>;
type $ValueLongMerge = ListMergeAddRemove<number, number>;
type $ValueLongPatch = $ValueLongReplace | $ValueLongMerge;

type $ValueFloatReplace = ListReplace<number>;
type $ValueFloatMerge = ListMergeAddRemove<number, number>;
type $ValueFloatPatch = $ValueFloatReplace | $ValueFloatMerge;

type $ValueDoubleReplace = ListReplace<number>;
type $ValueDoubleMerge = ListMergeAddRemove<number, number>;
type $ValueDoublePatch = $ValueDoubleReplace | $ValueDoubleMerge;

type $ValueStringReplace = ListReplace<string>;
type $ValueStringMerge = ListMergeAddRemove<string, string>;
type $ValueStringPatch = $ValueStringReplace | $ValueStringMerge;

type $ValueLocalDateReplace = ListReplace<string>;
type $ValueLocalDateMerge = ListMergeAddRemove<string, string>;
type $ValueLocalDatePatch = $ValueLocalDateReplace | $ValueLocalDateMerge;

type $ValueLocalDateTimeReplace = ListReplace<string>;
type $ValueLocalDateTimeMerge = ListMergeAddRemove<string, string>;
type $ValueLocalDateTimePatch = $ValueLocalDateTimeReplace | $ValueLocalDateTimeMerge;

type $ValueZonedDateTimeReplace = ListReplace<string>;
type $ValueZonedDateTimeMerge = ListMergeAddRemove<string, string>;
type $ValueZonedDateTimePatch = $ValueZonedDateTimeReplace | $ValueZonedDateTimeMerge;

export type PatchableRecord_Basic_ListPatch = {
	readonly key: string;
	readonly version: string;
	readonly valueBoolean?: $ValueBooleanPatch;
	readonly valueShort?: $ValueShortPatch;
	readonly valueInt?: $ValueIntPatch;
	readonly valueLong?: $ValueLongPatch;
	readonly valueFloat?: $ValueFloatPatch;
	readonly valueDouble?: $ValueDoublePatch;
	readonly valueString?: $ValueStringPatch;
	readonly valueLocalDate?: $ValueLocalDatePatch;
	readonly valueLocalDateTime?: $ValueLocalDateTimePatch;
	readonly valueZonedDateTime?: $ValueZonedDateTimePatch;
};

export function isPatchableRecord_Basic_ListPatch(value: unknown): value is PatchableRecord_Basic_ListPatch {
	return isRecord(value) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'version', isString) &&
		checkOptProp(value, 'valueBoolean', createReplaceAddRemoveGuard(isBoolean)) &&
		checkOptProp(value, 'valueShort', createReplaceAddRemoveGuard(isNumber)) &&
		checkOptProp(value, 'valueInt', createReplaceAddRemoveGuard(isNumber)) &&
		checkOptProp(value, 'valueLong', createReplaceAddRemoveGuard(isNumber)) &&
		checkOptProp(value, 'valueFloat', createReplaceAddRemoveGuard(isNumber)) &&
		checkOptProp(value, 'valueDouble', createReplaceAddRemoveGuard(isNumber)) &&
		checkOptProp(value, 'valueString', createReplaceAddRemoveGuard(isString)) &&
		checkOptProp(value, 'valueLocalDate', createReplaceAddRemoveGuard(isString)) &&
		checkOptProp(value, 'valueLocalDateTime', createReplaceAddRemoveGuard(isString)) &&
		checkOptProp(value, 'valueZonedDateTime', createReplaceAddRemoveGuard(isString));
}

export function PatchableRecord_Basic_ListPatchFromJSON($value: Record<string, unknown>): PatchableRecord_Basic_ListPatch {
	const key = propValue('key', $value, isString);
	const version = propValue('version', $value, isString);
	const valueBoolean = propListValue('valueBoolean', $value, isBoolean, 'optional');
	const valueShort = propListValue('valueShort', $value, isNumber, 'optional');
	const valueInt = propListValue('valueInt', $value, isNumber, 'optional');
	const valueLong = propListValue('valueLong', $value, isNumber, 'optional');
	const valueFloat = propListValue('valueFloat', $value, isNumber, 'optional');
	const valueDouble = propListValue('valueDouble', $value, isNumber, 'optional');
	const valueString = propListValue('valueString', $value, isString, 'optional');
	const valueLocalDate = propListValue('valueLocalDate', $value, isString, 'optional');
	const valueLocalDateTime = propListValue('valueLocalDateTime', $value, isString, 'optional');
	const valueZonedDateTime = propListValue('valueZonedDateTime', $value, isString, 'optional');
	return {
		key,
		version,
		valueBoolean,
		valueShort,
		valueInt,
		valueLong,
		valueFloat,
		valueDouble,
		valueString,
		valueLocalDate,
		valueLocalDateTime,
		valueZonedDateTime,
	};
}

export function PatchableRecord_Basic_ListPatchToJSON($value: PatchableRecord_Basic_ListPatch): Record<string, unknown> {
	const key = $value.key;
	const version = $value.version;
	const valueBoolean = $value.valueBoolean;
	const valueShort = $value.valueShort;
	const valueInt = $value.valueInt;
	const valueLong = $value.valueLong;
	const valueFloat = $value.valueFloat;
	const valueDouble = $value.valueDouble;
	const valueString = $value.valueString;
	const valueLocalDate = $value.valueLocalDate;
	const valueLocalDateTime = $value.valueLocalDateTime;
	const valueZonedDateTime = $value.valueZonedDateTime;

	return {
		key,
		version,
		valueBoolean,
		valueShort,
		valueInt,
		valueLong,
		valueFloat,
		valueDouble,
		valueString,
		valueLocalDate,
		valueLocalDateTime,
		valueZonedDateTime,
	};
}

