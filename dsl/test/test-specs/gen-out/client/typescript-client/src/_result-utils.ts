// Generated by RSD - Do not modify
import { checkProp, isRecord, isString } from './_type-utils.js';

const _Void: unique symbol = Symbol('Void');
export type VoidType = { _: typeof _Void };
export const Void: VoidType = Object.freeze({ _: _Void });

export type NonUndefined = NonNullable<unknown> | null;

export type Ok<T extends NonUndefined> = readonly [ok: T, err: null];
export type Err<E extends RSDError> = readonly [ok: undefined, err: E];
export type Result<T extends NonUndefined, E extends RSDError> = Ok<T> | Err<E>;

export type RSDError<T extends string = string> = {
	_type: T;
};

export function isRSDError(value: unknown): value is RSDError {
	return isRecord(value) && checkProp(value, '_type', isString);
}

export function isOk<T extends NonUndefined, E extends RSDError>(value: Result<T, E>): value is Ok<T> {
	const [err] = value;
	return err === null;
}

export function OK<T extends NonUndefined>(value: T): Ok<T> {
	return [value, null];
}

export function ERR<E extends RSDError>(err: E): Err<E> {
	return [undefined, err];
}

export async function $<X extends NonUndefined, Y extends RSDError>(source: Promise<Result<X, Y>>): Promise<X> {
	const [o, r] = await source;
	if (r !== null) {
		throw r;
	}
	throw o;
}

