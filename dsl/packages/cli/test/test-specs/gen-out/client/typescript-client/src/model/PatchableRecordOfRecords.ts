// Generated by RSD - Do not modify
import { isPatchableRecord_Basic, isPatchableRecord_BasicPatch, type PatchableRecord_Basic, PatchableRecord_BasicFromJSON, type PatchableRecord_BasicPatch, PatchableRecord_BasicPatchFromJSON, PatchableRecord_BasicPatchToJSON, PatchableRecord_BasicToJSON } from './PatchableRecord_Basic.js';
import { checkOptProp, checkProp, createListMergeUpdateRemoveToJSON, createListReplaceToJSON, createReplaceAddUpdateRemoveGuard, createTypedArrayGuard, isListReplace, isMerge, isNull, isRecord, isReplace, isString, isUndefined, type ListMergeAddUpdateRemove, ListMergeAddUpdateRemoveFromJSON, type ListReplace, ListReplaceFromJSON, type Merge, noopMap, propMappedListValue, propMappedValue, propValue, type Replace, ReplaceOrMergeFromJSON, ReplaceOrMergeToJSON } from '../_type-utils.js';

export type PatchableRecordOfRecords = {
	readonly key: string;
	readonly version: string;
	readonly value: PatchableRecord_Basic;
	readonly value_Null: PatchableRecord_Basic | null;
	readonly value_Opt?: PatchableRecord_Basic;
	readonly value_Opt_Null?: PatchableRecord_Basic | null;
	readonly list: PatchableRecord_Basic[];
	readonly list_Null: PatchableRecord_Basic[] | null;
	readonly list_Opt?: PatchableRecord_Basic[];
	readonly list_Opt_Null?: PatchableRecord_Basic[] | null;
};

export function isPatchableRecordOfRecords(value: unknown): value is PatchableRecordOfRecords {
	return isRecord(value) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'version', isString) &&
		checkProp(value, 'value', isPatchableRecord_Basic) &&
		(checkProp(value, 'value_Null', isNull) || checkProp(value, 'value_Null', isPatchableRecord_Basic)) &&
		checkOptProp(value, 'value_Opt', isPatchableRecord_Basic) &&
		(checkOptProp(value, 'value_Opt_Null', isNull) || checkOptProp(value, 'value_Opt_Null', isPatchableRecord_Basic)) &&
		checkProp(value, 'list', createTypedArrayGuard(isPatchableRecord_Basic)) &&
		(checkProp(value, 'list_Null', isNull) || checkProp(value, 'list_Null', createTypedArrayGuard(isPatchableRecord_Basic))) &&
		checkOptProp(value, 'list_Opt', createTypedArrayGuard(isPatchableRecord_Basic)) &&
		(checkOptProp(value, 'list_Opt_Null', isNull) || checkOptProp(value, 'list_Opt_Null', createTypedArrayGuard(isPatchableRecord_Basic)));
}

export function PatchableRecordOfRecordsFromJSON($value: Record<string, unknown>): PatchableRecordOfRecords {
	const key = propValue('key', $value, isString);
	const version = propValue('version', $value, isString);
	const value = propMappedValue('value', $value, isRecord, PatchableRecord_BasicFromJSON);
	const value_Null = propMappedValue('value_Null', $value, isRecord, PatchableRecord_BasicFromJSON, 'null');
	const value_Opt = propMappedValue('value_Opt', $value, isRecord, PatchableRecord_BasicFromJSON, 'optional');
	const value_Opt_Null = propMappedValue('value_Opt_Null', $value, isRecord, PatchableRecord_BasicFromJSON, 'optional_null');
	const list = propMappedListValue('list', $value, isRecord, PatchableRecord_BasicFromJSON);
	const list_Null = propMappedListValue('list_Null', $value, isRecord, PatchableRecord_BasicFromJSON, 'null');
	const list_Opt = propMappedListValue('list_Opt', $value, isRecord, PatchableRecord_BasicFromJSON, 'optional');
	const list_Opt_Null = propMappedListValue('list_Opt_Null', $value, isRecord, PatchableRecord_BasicFromJSON, 'optional_null');
	return {
		key,
		version,
		value,
		value_Null,
		value_Opt,
		value_Opt_Null,
		list,
		list_Null,
		list_Opt,
		list_Opt_Null,
	};
}

export function PatchableRecordOfRecordsToJSON($value: PatchableRecordOfRecords): Record<string, unknown> {
	const key = $value.key;
	const version = $value.version;
	const value = PatchableRecord_BasicToJSON($value.value);
	const value_Null = isNull($value.value_Null) ? null : PatchableRecord_BasicToJSON($value.value_Null);
	const value_Opt = isUndefined($value.value_Opt) ? undefined : PatchableRecord_BasicToJSON($value.value_Opt);
	const value_Opt_Null = isUndefined($value.value_Opt_Null) || isNull($value.value_Opt_Null) ? $value.value_Opt_Null : PatchableRecord_BasicToJSON($value.value_Opt_Null);
	const list = $value.list.map(PatchableRecord_BasicToJSON);
	const list_Null = isNull($value.list_Null) ? null : $value.list_Null.map(PatchableRecord_BasicToJSON);
	const list_Opt = isUndefined($value.list_Opt) ? undefined : $value.list_Opt.map(PatchableRecord_BasicToJSON);
	const list_Opt_Null = isUndefined($value.list_Opt_Null) || isNull($value.list_Opt_Null) ? $value.list_Opt_Null : $value.list_Opt_Null.map(PatchableRecord_BasicToJSON);

	return {
		key,
		version,
		value,
		value_Null,
		value_Opt,
		value_Opt_Null,
		list,
		list_Null,
		list_Opt,
		list_Opt_Null,
	};
}

type $ListReplace = ListReplace<PatchableRecord_Basic>;
type $ListMerge = ListMergeAddUpdateRemove<PatchableRecord_Basic, PatchableRecord_BasicPatch, string>;
type $ListPatch = $ListReplace | $ListMerge;

type $List_NullReplace = ListReplace<PatchableRecord_Basic>;
type $List_NullMerge = ListMergeAddUpdateRemove<PatchableRecord_Basic, PatchableRecord_BasicPatch, string>;
type $List_NullPatch = $List_NullReplace | $List_NullMerge;

type $List_OptReplace = ListReplace<PatchableRecord_Basic>;
type $List_OptMerge = ListMergeAddUpdateRemove<PatchableRecord_Basic, PatchableRecord_BasicPatch, string>;
type $List_OptPatch = $List_OptReplace | $List_OptMerge;

type $List_Opt_NullReplace = ListReplace<PatchableRecord_Basic>;
type $List_Opt_NullMerge = ListMergeAddUpdateRemove<PatchableRecord_Basic, PatchableRecord_BasicPatch, string>;
type $List_Opt_NullPatch = $List_Opt_NullReplace | $List_Opt_NullMerge;

type $ValuePatch = (PatchableRecord_Basic & Replace) | (PatchableRecord_BasicPatch & Merge);
type $Value_NullPatch = (PatchableRecord_Basic & Replace) | (PatchableRecord_BasicPatch & Merge);
type $Value_OptPatch = (PatchableRecord_Basic & Replace) | (PatchableRecord_BasicPatch & Merge);
type $Value_Opt_NullPatch = (PatchableRecord_Basic & Replace) | (PatchableRecord_BasicPatch & Merge);

export type PatchableRecordOfRecordsPatch = {
	readonly key: string;
	readonly version: string;
	readonly value?: $ValuePatch;
	readonly value_Null?: $Value_NullPatch | null;
	readonly value_Opt?: $Value_OptPatch | null;
	readonly value_Opt_Null?: $Value_Opt_NullPatch | null;
	readonly list?: $ListPatch;
	readonly list_Null?: $List_NullPatch | null;
	readonly list_Opt?: $List_OptPatch | null;
	readonly list_Opt_Null?: $List_Opt_NullPatch | null;
};

function isValuePatch(v: unknown): v is $ValuePatch {
	return (isReplace(v) && isPatchableRecord_Basic(v)) || (isMerge(v) && isPatchableRecord_BasicPatch(v));
}

function isValue_NullPatch(v: unknown): v is $Value_NullPatch {
	return (isReplace(v) && isPatchableRecord_Basic(v)) || (isMerge(v) && isPatchableRecord_BasicPatch(v));
}

function isValue_OptPatch(v: unknown): v is $Value_OptPatch {
	return (isReplace(v) && isPatchableRecord_Basic(v)) || (isMerge(v) && isPatchableRecord_BasicPatch(v));
}

function isValue_Opt_NullPatch(v: unknown): v is $Value_Opt_NullPatch {
	return (isReplace(v) && isPatchableRecord_Basic(v)) || (isMerge(v) && isPatchableRecord_BasicPatch(v));
}


export function isPatchableRecordOfRecordsPatch(value: unknown): value is PatchableRecordOfRecordsPatch {
	return isRecord(value) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'version', isString) &&
		checkOptProp(value, 'value', isValuePatch) &&
		(checkOptProp(value, 'value_Null', isNull) || checkOptProp(value, 'value_Null', isValue_NullPatch)) &&
		(checkOptProp(value, 'value_Opt', isNull) || checkOptProp(value, 'value_Opt', isValue_OptPatch)) &&
		(checkOptProp(value, 'value_Opt_Null', isNull) || checkOptProp(value, 'value_Opt_Null', isValue_Opt_NullPatch)) &&
		checkOptProp(value, 'list', createReplaceAddUpdateRemoveGuard(isPatchableRecord_Basic, isPatchableRecord_BasicPatch, isString)) &&
		(checkOptProp(value, 'list_Null', isNull) || checkOptProp(value, 'list_Null', createReplaceAddUpdateRemoveGuard(isPatchableRecord_Basic, isPatchableRecord_BasicPatch, isString))) &&
		(checkOptProp(value, 'list_Opt', isNull) || checkOptProp(value, 'list_Opt', createReplaceAddUpdateRemoveGuard(isPatchableRecord_Basic, isPatchableRecord_BasicPatch, isString))) &&
		(checkOptProp(value, 'list_Opt_Null', isNull) || checkOptProp(value, 'list_Opt_Null', createReplaceAddUpdateRemoveGuard(isPatchableRecord_Basic, isPatchableRecord_BasicPatch, isString)));
}

export function PatchableRecordOfRecordsPatchFromJSON($value: Record<string, unknown>): PatchableRecordOfRecordsPatch {
	const key = propValue('key', $value, isString);
	const version = propValue('version', $value, isString);
	const value = propMappedValue('value', $value, isRecord, v => ReplaceOrMergeFromJSON(v, PatchableRecord_BasicFromJSON, PatchableRecord_BasicPatchFromJSON), 'optional');
	const value_Null = propMappedValue('value_Null', $value, isRecord, v => ReplaceOrMergeFromJSON(v, PatchableRecord_BasicFromJSON, PatchableRecord_BasicPatchFromJSON), 'optional_null');
	const value_Opt = propMappedValue('value_Opt', $value, isRecord, v => ReplaceOrMergeFromJSON(v, PatchableRecord_BasicFromJSON, PatchableRecord_BasicPatchFromJSON), 'optional_null');
	const value_Opt_Null = propMappedValue('value_Opt_Null', $value, isRecord, v => ReplaceOrMergeFromJSON(v, PatchableRecord_BasicFromJSON, PatchableRecord_BasicPatchFromJSON), 'optional_null');
	const list = propMappedValue('list', $value, isRecord, v => isListReplace(v, isRecord) ? ListReplaceFromJSON(v, isRecord, PatchableRecord_BasicFromJSON) : ListMergeAddUpdateRemoveFromJSON(v, isRecord, PatchableRecord_BasicFromJSON, isRecord, PatchableRecord_BasicPatchFromJSON, isString, noopMap), 'optional');
	const list_Null = propMappedValue('list_Null', $value, isRecord, v => isListReplace(v, isRecord) ? ListReplaceFromJSON(v, isRecord, PatchableRecord_BasicFromJSON) : ListMergeAddUpdateRemoveFromJSON(v, isRecord, PatchableRecord_BasicFromJSON, isRecord, PatchableRecord_BasicPatchFromJSON, isString, noopMap), 'optional_null');
	const list_Opt = propMappedValue('list_Opt', $value, isRecord, v => isListReplace(v, isRecord) ? ListReplaceFromJSON(v, isRecord, PatchableRecord_BasicFromJSON) : ListMergeAddUpdateRemoveFromJSON(v, isRecord, PatchableRecord_BasicFromJSON, isRecord, PatchableRecord_BasicPatchFromJSON, isString, noopMap), 'optional_null');
	const list_Opt_Null = propMappedValue('list_Opt_Null', $value, isRecord, v => isListReplace(v, isRecord) ? ListReplaceFromJSON(v, isRecord, PatchableRecord_BasicFromJSON) : ListMergeAddUpdateRemoveFromJSON(v, isRecord, PatchableRecord_BasicFromJSON, isRecord, PatchableRecord_BasicPatchFromJSON, isString, noopMap), 'optional_null');
	return {
		key,
		version,
		value,
		value_Null,
		value_Opt,
		value_Opt_Null,
		list,
		list_Null,
		list_Opt,
		list_Opt_Null,
	};
}

export function PatchableRecordOfRecordsPatchToJSON($value: PatchableRecordOfRecordsPatch): Record<string, unknown> {
	const key = $value.key;
	const version = $value.version;
	const value = isUndefined($value.value) ? undefined : ReplaceOrMergeToJSON($value.value, PatchableRecord_BasicToJSON, PatchableRecord_BasicPatchToJSON);
	const value_Null = isUndefined($value.value_Null) || isNull($value.value_Null) ? $value.value_Null : ReplaceOrMergeToJSON($value.value_Null, PatchableRecord_BasicToJSON, PatchableRecord_BasicPatchToJSON);
	const value_Opt = isUndefined($value.value_Opt) || isNull($value.value_Opt) ? $value.value_Opt : ReplaceOrMergeToJSON($value.value_Opt, PatchableRecord_BasicToJSON, PatchableRecord_BasicPatchToJSON);
	const value_Opt_Null = isUndefined($value.value_Opt_Null) || isNull($value.value_Opt_Null) ? $value.value_Opt_Null : ReplaceOrMergeToJSON($value.value_Opt_Null, PatchableRecord_BasicToJSON, PatchableRecord_BasicPatchToJSON);
	const list = isUndefined($value.list) ? undefined : ReplaceOrMergeToJSON($value.list, createListReplaceToJSON(PatchableRecord_BasicToJSON), createListMergeUpdateRemoveToJSON<PatchableRecord_Basic, PatchableRecord_BasicPatch, string, $ListMerge>(PatchableRecord_BasicToJSON, PatchableRecord_BasicPatchToJSON, noopMap));
	const list_Null = isUndefined($value.list_Null) || isNull($value.list_Null) ? $value.list_Null : ReplaceOrMergeToJSON($value.list_Null, createListReplaceToJSON(PatchableRecord_BasicToJSON), createListMergeUpdateRemoveToJSON<PatchableRecord_Basic, PatchableRecord_BasicPatch, string, $List_NullMerge>(PatchableRecord_BasicToJSON, PatchableRecord_BasicPatchToJSON, noopMap));
	const list_Opt = isUndefined($value.list_Opt) || isNull($value.list_Opt) ? $value.list_Opt : ReplaceOrMergeToJSON($value.list_Opt, createListReplaceToJSON(PatchableRecord_BasicToJSON), createListMergeUpdateRemoveToJSON<PatchableRecord_Basic, PatchableRecord_BasicPatch, string, $List_OptMerge>(PatchableRecord_BasicToJSON, PatchableRecord_BasicPatchToJSON, noopMap));
	const list_Opt_Null = isUndefined($value.list_Opt_Null) || isNull($value.list_Opt_Null) ? $value.list_Opt_Null : ReplaceOrMergeToJSON($value.list_Opt_Null, createListReplaceToJSON(PatchableRecord_BasicToJSON), createListMergeUpdateRemoveToJSON<PatchableRecord_Basic, PatchableRecord_BasicPatch, string, $List_Opt_NullMerge>(PatchableRecord_BasicToJSON, PatchableRecord_BasicPatchToJSON, noopMap));

	return {
		key,
		version,
		value,
		value_Null,
		value_Opt,
		value_Opt_Null,
		list,
		list_Null,
		list_Opt,
		list_Opt_Null,
	};
}

