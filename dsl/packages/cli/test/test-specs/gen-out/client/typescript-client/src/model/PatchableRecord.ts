// Generated by RSD - Do not modify
import { checkOptProp, checkProp, isRecord, isString, propValue } from '../_type-utils.js';

export type PatchableRecord = {
	readonly key: string;
	readonly version: string;
	readonly value: string;
};

export function isPatchableRecord(value: unknown): value is PatchableRecord {
	return isRecord(value) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'version', isString) &&
		checkProp(value, 'value', isString);
}

export function PatchableRecordFromJSON($value: Record<string, unknown>): PatchableRecord {
	const key = propValue('key', $value, isString);
	const version = propValue('version', $value, isString);
	const value = propValue('value', $value, isString);
	return {
		key,
		version,
		value,
	};
}

export function PatchableRecordToJSON($value: PatchableRecord): Record<string, unknown> {
	const key = $value.key;
	const version = $value.version;
	const value = $value.value;

	return {
		key,
		version,
		value,
	};
}

export type PatchableRecordPatch = {
	readonly key: string;
	readonly version: string;
	readonly value?: string;
};

export function isPatchableRecordPatch(value: unknown): value is PatchableRecordPatch {
	return isRecord(value) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'version', isString) &&
		checkOptProp(value, 'value', isString);
}

export function PatchableRecordPatchFromJSON($value: Record<string, unknown>): PatchableRecordPatch {
	const key = propValue('key', $value, isString);
	const version = propValue('version', $value, isString);
	const value = propValue('value', $value, isString, 'optional');
	return {
		key,
		version,
		value,
	};
}

export function PatchableRecordPatchToJSON($value: PatchableRecordPatch): Record<string, unknown> {
	const key = $value.key;
	const version = $value.version;
	const value = $value.value;

	return {
		key,
		version,
		value,
	};
}

