// Generated by RSD - Do not modify
import { checkOptProp, checkProp, createReplaceAddRemoveGuard, createTypedArrayGuard, isNull, isRecord, isString, type ListMergeAddRemove, ListMergeAddRemoveFromJSON, type ListReplace, noopMap, propListValue, propMappedValue, propValue } from '../_type-utils.js';

type ValueEnum = 'A' | 'B';
type Value_NullEnum = 'C' | 'D';
type Value_OptEnum = 'E' | 'F';
type Value_Opt_NullEnum = 'G' | 'H';
type ListEnum = 'A' | 'B';
type List_NullEnum = 'C' | 'D';
type List_Opt_NullEnum = 'G' | 'H';

export function isPatchableEnumInlineRecord_Value(value: unknown): value is ValueEnum {
	return value === 'A' || value === 'B';
}

export function isPatchableEnumInlineRecord_Value_Null(value: unknown): value is Value_NullEnum {
	return value === 'C' || value === 'D';
}

export function isPatchableEnumInlineRecord_Value_Opt(value: unknown): value is Value_OptEnum {
	return value === 'E' || value === 'F';
}

export function isPatchableEnumInlineRecord_Value_Opt_Null(value: unknown): value is Value_Opt_NullEnum {
	return value === 'G' || value === 'H';
}

export function isPatchableEnumInlineRecord_List(value: unknown): value is ListEnum {
	return value === 'A' || value === 'B';
}

export function isPatchableEnumInlineRecord_List_Null(value: unknown): value is List_NullEnum {
	return value === 'C' || value === 'D';
}

export function isPatchableEnumInlineRecord_List_Opt_Null(value: unknown): value is List_Opt_NullEnum {
	return value === 'G' || value === 'H';
}

export type PatchableEnumInlineRecord = {
	readonly key: string;
	readonly version: string;
	readonly value: ValueEnum;
	readonly value_Null: Value_NullEnum | null;
	readonly value_Opt?: Value_OptEnum;
	readonly value_Opt_Null?: Value_Opt_NullEnum | null;
	readonly list: ListEnum[];
	readonly list_Null: List_NullEnum[] | null;
	readonly list_Opt_Null?: List_Opt_NullEnum[] | null;
};

export function isPatchableEnumInlineRecord(value: unknown): value is PatchableEnumInlineRecord {
	return isRecord(value) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'version', isString) &&
		checkProp(value, 'value', isPatchableEnumInlineRecord_Value) &&
		(checkProp(value, 'value_Null', isNull) || checkProp(value, 'value_Null', isPatchableEnumInlineRecord_Value_Null)) &&
		checkOptProp(value, 'value_Opt', isPatchableEnumInlineRecord_Value_Opt) &&
		(checkOptProp(value, 'value_Opt_Null', isNull) || checkOptProp(value, 'value_Opt_Null', isPatchableEnumInlineRecord_Value_Opt_Null)) &&
		checkProp(value, 'list', createTypedArrayGuard(isPatchableEnumInlineRecord_List)) &&
		(checkProp(value, 'list_Null', isNull) || checkProp(value, 'list_Null', createTypedArrayGuard(isPatchableEnumInlineRecord_List_Null))) &&
		(checkOptProp(value, 'list_Opt_Null', isNull) || checkOptProp(value, 'list_Opt_Null', createTypedArrayGuard(isPatchableEnumInlineRecord_List_Opt_Null)));
}

export function PatchableEnumInlineRecordFromJSON($value: Record<string, unknown>): PatchableEnumInlineRecord {
	const key = propValue('key', $value, isString);
	const version = propValue('version', $value, isString);
	const value = propValue('value', $value, isPatchableEnumInlineRecord_Value);
	const value_Null = propValue('value_Null', $value, isPatchableEnumInlineRecord_Value_Null, 'null');
	const value_Opt = propValue('value_Opt', $value, isPatchableEnumInlineRecord_Value_Opt, 'optional');
	const value_Opt_Null = propValue('value_Opt_Null', $value, isPatchableEnumInlineRecord_Value_Opt_Null, 'optional_null');
	const list = propListValue('list', $value, isPatchableEnumInlineRecord_List);
	const list_Null = propListValue('list_Null', $value, isPatchableEnumInlineRecord_List_Null, 'null');
	const list_Opt_Null = propListValue('list_Opt_Null', $value, isPatchableEnumInlineRecord_List_Opt_Null, 'optional_null');
	return {
		key,
		version,
		value,
		value_Null,
		value_Opt,
		value_Opt_Null,
		list,
		list_Null,
		list_Opt_Null,
	};
}

export function PatchableEnumInlineRecordToJSON($value: PatchableEnumInlineRecord): Record<string, unknown> {
	const key = $value.key;
	const version = $value.version;
	const value = $value.value;
	const value_Null = $value.value_Null;
	const value_Opt = $value.value_Opt;
	const value_Opt_Null = $value.value_Opt_Null;
	const list = $value.list;
	const list_Null = $value.list_Null;
	const list_Opt_Null = $value.list_Opt_Null;

	return {
		key,
		version,
		value,
		value_Null,
		value_Opt,
		value_Opt_Null,
		list,
		list_Null,
		list_Opt_Null,
	};
}

type $ListReplace = ListReplace<ListEnum>;
type $ListMerge = ListMergeAddRemove<ListEnum, ListEnum>;
type $ListPatch = $ListReplace | $ListMerge;

type $List_NullReplace = ListReplace<List_NullEnum>;
type $List_NullMerge = ListMergeAddRemove<List_NullEnum, List_NullEnum>;
type $List_NullPatch = $List_NullReplace | $List_NullMerge;

type $List_Opt_NullReplace = ListReplace<List_Opt_NullEnum>;
type $List_Opt_NullMerge = ListMergeAddRemove<List_Opt_NullEnum, List_Opt_NullEnum>;
type $List_Opt_NullPatch = $List_Opt_NullReplace | $List_Opt_NullMerge;

export type PatchableEnumInlineRecordPatch = {
	readonly key: string;
	readonly version: string;
	readonly value?: ValueEnum;
	readonly value_Null?: Value_NullEnum | null;
	readonly value_Opt?: Value_OptEnum | null;
	readonly value_Opt_Null?: Value_Opt_NullEnum | null;
	readonly list?: $ListPatch;
	readonly list_Null?: $List_NullPatch | null;
	readonly list_Opt_Null?: $List_Opt_NullPatch | null;
};

export function isPatchableEnumInlineRecordPatch(value: unknown): value is PatchableEnumInlineRecordPatch {
	return isRecord(value) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'version', isString) &&
		checkOptProp(value, 'value', isPatchableEnumInlineRecord_Value) &&
		(checkOptProp(value, 'value_Null', isNull) || checkOptProp(value, 'value_Null', isPatchableEnumInlineRecord_Value_Null)) &&
		(checkOptProp(value, 'value_Opt', isNull) || checkOptProp(value, 'value_Opt', isPatchableEnumInlineRecord_Value_Opt)) &&
		(checkOptProp(value, 'value_Opt_Null', isNull) || checkOptProp(value, 'value_Opt_Null', isPatchableEnumInlineRecord_Value_Opt_Null)) &&
		checkOptProp(value, 'list', createReplaceAddRemoveGuard(isPatchableEnumInlineRecord_List)) &&
		(checkOptProp(value, 'list_Null', isNull) || checkOptProp(value, 'list_Null', createReplaceAddRemoveGuard(isPatchableEnumInlineRecord_List_Null))) &&
		(checkOptProp(value, 'list_Opt_Null', isNull) || checkOptProp(value, 'list_Opt_Null', createReplaceAddRemoveGuard(isPatchableEnumInlineRecord_List_Opt_Null)));
}

export function PatchableEnumInlineRecordPatchFromJSON($value: Record<string, unknown>): PatchableEnumInlineRecordPatch {
	const key = propValue('key', $value, isString);
	const version = propValue('version', $value, isString);
	const value = propValue('value', $value, isPatchableEnumInlineRecord_Value, 'optional');
	const value_Null = propValue('value_Null', $value, isPatchableEnumInlineRecord_Value_Null, 'optional_null');
	const value_Opt = propValue('value_Opt', $value, isPatchableEnumInlineRecord_Value_Opt, 'optional_null');
	const value_Opt_Null = propValue('value_Opt_Null', $value, isPatchableEnumInlineRecord_Value_Opt_Null, 'optional_null');
	const list = propMappedValue('list', $value, isRecord, v => ListMergeAddRemoveFromJSON(v, isPatchableEnumInlineRecord_List, noopMap, isPatchableEnumInlineRecord_List, noopMap), 'optional');
	const list_Null = propMappedValue('list_Null', $value, isRecord, v => ListMergeAddRemoveFromJSON(v, isPatchableEnumInlineRecord_List_Null, noopMap, isPatchableEnumInlineRecord_List_Null, noopMap), 'optional_null');
	const list_Opt_Null = propMappedValue('list_Opt_Null', $value, isRecord, v => ListMergeAddRemoveFromJSON(v, isPatchableEnumInlineRecord_List_Opt_Null, noopMap, isPatchableEnumInlineRecord_List_Opt_Null, noopMap), 'optional_null');
	return {
		key,
		version,
		value,
		value_Null,
		value_Opt,
		value_Opt_Null,
		list,
		list_Null,
		list_Opt_Null,
	};
}

export function PatchableEnumInlineRecordPatchToJSON($value: PatchableEnumInlineRecordPatch): Record<string, unknown> {
	const key = $value.key;
	const version = $value.version;
	const value = $value.value;
	const value_Null = $value.value_Null;
	const value_Opt = $value.value_Opt;
	const value_Opt_Null = $value.value_Opt_Null;
	const list = $value.list;
	const list_Null = $value.list_Null;
	const list_Opt_Null = $value.list_Opt_Null;

	return {
		key,
		version,
		value,
		value_Null,
		value_Opt,
		value_Opt_Null,
		list,
		list_Null,
		list_Opt_Null,
	};
}

