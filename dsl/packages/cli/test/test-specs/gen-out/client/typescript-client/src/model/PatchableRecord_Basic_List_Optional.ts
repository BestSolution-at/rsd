// Generated by RSD - Do not modify
import { checkOptProp, checkProp, createReplaceAddRemoveGuard, createTypedArrayGuard, isBoolean, isListReplace, isNull, isNumber, isRecord, isString, type ListMergeAddRemove, ListMergeAddRemoveFromJSON, type ListReplace, ListReplaceFromJSON, noopMap, propListValue, propMappedValue, propValue } from '../_type-utils.js';

export type PatchableRecord_Basic_List_Optional = {
	readonly key: string;
	readonly version: string;
	readonly valueBoolean?: boolean[];
	readonly valueShort?: number[];
	readonly valueInt?: number[];
	readonly valueLong?: number[];
	readonly valueFloat?: number[];
	readonly valueDouble?: number[];
	readonly valueString?: string[];
	readonly valueLocalDate?: string[];
	readonly valueLocalDateTime?: string[];
	readonly valueZonedDateTime?: string[];
};

export function isPatchableRecord_Basic_List_Optional(value: unknown): value is PatchableRecord_Basic_List_Optional {
	return isRecord(value) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'version', isString) &&
		checkOptProp(value, 'valueBoolean', createTypedArrayGuard(isBoolean)) &&
		checkOptProp(value, 'valueShort', createTypedArrayGuard(isNumber)) &&
		checkOptProp(value, 'valueInt', createTypedArrayGuard(isNumber)) &&
		checkOptProp(value, 'valueLong', createTypedArrayGuard(isNumber)) &&
		checkOptProp(value, 'valueFloat', createTypedArrayGuard(isNumber)) &&
		checkOptProp(value, 'valueDouble', createTypedArrayGuard(isNumber)) &&
		checkOptProp(value, 'valueString', createTypedArrayGuard(isString)) &&
		checkOptProp(value, 'valueLocalDate', createTypedArrayGuard(isString)) &&
		checkOptProp(value, 'valueLocalDateTime', createTypedArrayGuard(isString)) &&
		checkOptProp(value, 'valueZonedDateTime', createTypedArrayGuard(isString));
}

export function PatchableRecord_Basic_List_OptionalFromJSON($value: Record<string, unknown>): PatchableRecord_Basic_List_Optional {
	const key = propValue('key', $value, isString);
	const version = propValue('version', $value, isString);
	const valueBoolean = propListValue('valueBoolean', $value, isBoolean, 'optional');
	const valueShort = propListValue('valueShort', $value, isNumber, 'optional');
	const valueInt = propListValue('valueInt', $value, isNumber, 'optional');
	const valueLong = propListValue('valueLong', $value, isNumber, 'optional');
	const valueFloat = propListValue('valueFloat', $value, isNumber, 'optional');
	const valueDouble = propListValue('valueDouble', $value, isNumber, 'optional');
	const valueString = propListValue('valueString', $value, isString, 'optional');
	const valueLocalDate = propListValue('valueLocalDate', $value, isString, 'optional');
	const valueLocalDateTime = propListValue('valueLocalDateTime', $value, isString, 'optional');
	const valueZonedDateTime = propListValue('valueZonedDateTime', $value, isString, 'optional');
	return {
		key,
		version,
		valueBoolean,
		valueShort,
		valueInt,
		valueLong,
		valueFloat,
		valueDouble,
		valueString,
		valueLocalDate,
		valueLocalDateTime,
		valueZonedDateTime,
	};
}

export function PatchableRecord_Basic_List_OptionalToJSON($value: PatchableRecord_Basic_List_Optional): Record<string, unknown> {
	const key = $value.key;
	const version = $value.version;
	const valueBoolean = $value.valueBoolean;
	const valueShort = $value.valueShort;
	const valueInt = $value.valueInt;
	const valueLong = $value.valueLong;
	const valueFloat = $value.valueFloat;
	const valueDouble = $value.valueDouble;
	const valueString = $value.valueString;
	const valueLocalDate = $value.valueLocalDate;
	const valueLocalDateTime = $value.valueLocalDateTime;
	const valueZonedDateTime = $value.valueZonedDateTime;

	return {
		key,
		version,
		valueBoolean,
		valueShort,
		valueInt,
		valueLong,
		valueFloat,
		valueDouble,
		valueString,
		valueLocalDate,
		valueLocalDateTime,
		valueZonedDateTime,
	};
}

type $ValueBooleanReplace = ListReplace<boolean>;
type $ValueBooleanMerge = ListMergeAddRemove<boolean, boolean>;
type $ValueBooleanPatch = $ValueBooleanReplace | $ValueBooleanMerge;

type $ValueShortReplace = ListReplace<number>;
type $ValueShortMerge = ListMergeAddRemove<number, number>;
type $ValueShortPatch = $ValueShortReplace | $ValueShortMerge;

type $ValueIntReplace = ListReplace<number>;
type $ValueIntMerge = ListMergeAddRemove<number, number>;
type $ValueIntPatch = $ValueIntReplace | $ValueIntMerge;

type $ValueLongReplace = ListReplace<number>;
type $ValueLongMerge = ListMergeAddRemove<number, number>;
type $ValueLongPatch = $ValueLongReplace | $ValueLongMerge;

type $ValueFloatReplace = ListReplace<number>;
type $ValueFloatMerge = ListMergeAddRemove<number, number>;
type $ValueFloatPatch = $ValueFloatReplace | $ValueFloatMerge;

type $ValueDoubleReplace = ListReplace<number>;
type $ValueDoubleMerge = ListMergeAddRemove<number, number>;
type $ValueDoublePatch = $ValueDoubleReplace | $ValueDoubleMerge;

type $ValueStringReplace = ListReplace<string>;
type $ValueStringMerge = ListMergeAddRemove<string, string>;
type $ValueStringPatch = $ValueStringReplace | $ValueStringMerge;

type $ValueLocalDateReplace = ListReplace<string>;
type $ValueLocalDateMerge = ListMergeAddRemove<string, string>;
type $ValueLocalDatePatch = $ValueLocalDateReplace | $ValueLocalDateMerge;

type $ValueLocalDateTimeReplace = ListReplace<string>;
type $ValueLocalDateTimeMerge = ListMergeAddRemove<string, string>;
type $ValueLocalDateTimePatch = $ValueLocalDateTimeReplace | $ValueLocalDateTimeMerge;

type $ValueZonedDateTimeReplace = ListReplace<string>;
type $ValueZonedDateTimeMerge = ListMergeAddRemove<string, string>;
type $ValueZonedDateTimePatch = $ValueZonedDateTimeReplace | $ValueZonedDateTimeMerge;

export type PatchableRecord_Basic_List_OptionalPatch = {
	readonly key: string;
	readonly version: string;
	readonly valueBoolean?: $ValueBooleanPatch | null;
	readonly valueShort?: $ValueShortPatch | null;
	readonly valueInt?: $ValueIntPatch | null;
	readonly valueLong?: $ValueLongPatch | null;
	readonly valueFloat?: $ValueFloatPatch | null;
	readonly valueDouble?: $ValueDoublePatch | null;
	readonly valueString?: $ValueStringPatch | null;
	readonly valueLocalDate?: $ValueLocalDatePatch | null;
	readonly valueLocalDateTime?: $ValueLocalDateTimePatch | null;
	readonly valueZonedDateTime?: $ValueZonedDateTimePatch | null;
};

export function isPatchableRecord_Basic_List_OptionalPatch(value: unknown): value is PatchableRecord_Basic_List_OptionalPatch {
	return isRecord(value) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'version', isString) &&
		(checkOptProp(value, 'valueBoolean', isNull) || checkOptProp(value, 'valueBoolean', createReplaceAddRemoveGuard(isBoolean))) &&
		(checkOptProp(value, 'valueShort', isNull) || checkOptProp(value, 'valueShort', createReplaceAddRemoveGuard(isNumber))) &&
		(checkOptProp(value, 'valueInt', isNull) || checkOptProp(value, 'valueInt', createReplaceAddRemoveGuard(isNumber))) &&
		(checkOptProp(value, 'valueLong', isNull) || checkOptProp(value, 'valueLong', createReplaceAddRemoveGuard(isNumber))) &&
		(checkOptProp(value, 'valueFloat', isNull) || checkOptProp(value, 'valueFloat', createReplaceAddRemoveGuard(isNumber))) &&
		(checkOptProp(value, 'valueDouble', isNull) || checkOptProp(value, 'valueDouble', createReplaceAddRemoveGuard(isNumber))) &&
		(checkOptProp(value, 'valueString', isNull) || checkOptProp(value, 'valueString', createReplaceAddRemoveGuard(isString))) &&
		(checkOptProp(value, 'valueLocalDate', isNull) || checkOptProp(value, 'valueLocalDate', createReplaceAddRemoveGuard(isString))) &&
		(checkOptProp(value, 'valueLocalDateTime', isNull) || checkOptProp(value, 'valueLocalDateTime', createReplaceAddRemoveGuard(isString))) &&
		(checkOptProp(value, 'valueZonedDateTime', isNull) || checkOptProp(value, 'valueZonedDateTime', createReplaceAddRemoveGuard(isString)));
}

export function PatchableRecord_Basic_List_OptionalPatchFromJSON($value: Record<string, unknown>): PatchableRecord_Basic_List_OptionalPatch {
	const key = propValue('key', $value, isString);
	const version = propValue('version', $value, isString);
	const valueBoolean = propMappedValue('valueBoolean', $value, isRecord, v => isListReplace(v, isBoolean) ? ListReplaceFromJSON(v, isBoolean, noopMap) : ListMergeAddRemoveFromJSON(v, isBoolean, noopMap, isBoolean, noopMap), 'optional_null');
	const valueShort = propMappedValue('valueShort', $value, isRecord, v => isListReplace(v, isNumber) ? ListReplaceFromJSON(v, isNumber, noopMap) : ListMergeAddRemoveFromJSON(v, isNumber, noopMap, isNumber, noopMap), 'optional_null');
	const valueInt = propMappedValue('valueInt', $value, isRecord, v => isListReplace(v, isNumber) ? ListReplaceFromJSON(v, isNumber, noopMap) : ListMergeAddRemoveFromJSON(v, isNumber, noopMap, isNumber, noopMap), 'optional_null');
	const valueLong = propMappedValue('valueLong', $value, isRecord, v => isListReplace(v, isNumber) ? ListReplaceFromJSON(v, isNumber, noopMap) : ListMergeAddRemoveFromJSON(v, isNumber, noopMap, isNumber, noopMap), 'optional_null');
	const valueFloat = propMappedValue('valueFloat', $value, isRecord, v => isListReplace(v, isNumber) ? ListReplaceFromJSON(v, isNumber, noopMap) : ListMergeAddRemoveFromJSON(v, isNumber, noopMap, isNumber, noopMap), 'optional_null');
	const valueDouble = propMappedValue('valueDouble', $value, isRecord, v => isListReplace(v, isNumber) ? ListReplaceFromJSON(v, isNumber, noopMap) : ListMergeAddRemoveFromJSON(v, isNumber, noopMap, isNumber, noopMap), 'optional_null');
	const valueString = propMappedValue('valueString', $value, isRecord, v => isListReplace(v, isString) ? ListReplaceFromJSON(v, isString, noopMap) : ListMergeAddRemoveFromJSON(v, isString, noopMap, isString, noopMap), 'optional_null');
	const valueLocalDate = propMappedValue('valueLocalDate', $value, isRecord, v => isListReplace(v, isString) ? ListReplaceFromJSON(v, isString, noopMap) : ListMergeAddRemoveFromJSON(v, isString, noopMap, isString, noopMap), 'optional_null');
	const valueLocalDateTime = propMappedValue('valueLocalDateTime', $value, isRecord, v => isListReplace(v, isString) ? ListReplaceFromJSON(v, isString, noopMap) : ListMergeAddRemoveFromJSON(v, isString, noopMap, isString, noopMap), 'optional_null');
	const valueZonedDateTime = propMappedValue('valueZonedDateTime', $value, isRecord, v => isListReplace(v, isString) ? ListReplaceFromJSON(v, isString, noopMap) : ListMergeAddRemoveFromJSON(v, isString, noopMap, isString, noopMap), 'optional_null');
	return {
		key,
		version,
		valueBoolean,
		valueShort,
		valueInt,
		valueLong,
		valueFloat,
		valueDouble,
		valueString,
		valueLocalDate,
		valueLocalDateTime,
		valueZonedDateTime,
	};
}

export function PatchableRecord_Basic_List_OptionalPatchToJSON($value: PatchableRecord_Basic_List_OptionalPatch): Record<string, unknown> {
	const key = $value.key;
	const version = $value.version;
	const valueBoolean = $value.valueBoolean;
	const valueShort = $value.valueShort;
	const valueInt = $value.valueInt;
	const valueLong = $value.valueLong;
	const valueFloat = $value.valueFloat;
	const valueDouble = $value.valueDouble;
	const valueString = $value.valueString;
	const valueLocalDate = $value.valueLocalDate;
	const valueLocalDateTime = $value.valueLocalDateTime;
	const valueZonedDateTime = $value.valueZonedDateTime;

	return {
		key,
		version,
		valueBoolean,
		valueShort,
		valueInt,
		valueLong,
		valueFloat,
		valueDouble,
		valueString,
		valueLocalDate,
		valueLocalDateTime,
		valueZonedDateTime,
	};
}

