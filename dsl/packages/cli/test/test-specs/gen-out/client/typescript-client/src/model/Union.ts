// Generated by RSD - Do not modify
import { isUnionA, type UnionA, UnionAFromJSON, UnionAToJSON } from './UnionA.js';
import { isUnionB, type UnionB, UnionBFromJSON, UnionBToJSON } from './UnionB.js';
import { isString } from '../_type-utils.js';

export type Union = UnionA | UnionB;

export function isUnion(value: unknown): value is Union {
	return isUnionA(value) || isUnionB(value);
}

export function UnionFromJSON(value: Record<string, unknown>): Union {
	const descriminator = value['@type'];

	if (!isString(descriminator)) {
		throw new Error('No valid descriminator found');
	}
	switch (descriminator) {
		case 'union-a':
			return UnionAFromJSON(value);
		case 'union-b':
			return UnionBFromJSON(value);
		default:
			throw new Error(`Unknown descriminator "${descriminator}"`);
	}
}

export function UnionToJSON(value: Union): Record<string, unknown> {
	const $desc = value['@type'];
	switch ($desc) {
		case 'union-a':
			return UnionAToJSON(value);
		case 'union-b':
			return UnionBToJSON(value);
	}
}
