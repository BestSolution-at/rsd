// Generated by RSD - Do not modify
import { isPatchableUnionA, isPatchableUnionAPatch, type PatchableUnionA, PatchableUnionAFromJSON, PatchableUnionAPatch, PatchableUnionAPatchFromJSON, PatchableUnionAPatchToJSON, PatchableUnionAToJSON } from './PatchableUnionA.js';
import { isPatchableUnionB, isPatchableUnionBPatch, type PatchableUnionB, PatchableUnionBFromJSON, PatchableUnionBPatch, PatchableUnionBPatchFromJSON, PatchableUnionBPatchToJSON, PatchableUnionBToJSON } from './PatchableUnionB.js';
import { checkProp, isString } from '../_type-utils.js';

export type PatchableUnion = PatchableUnionA | PatchableUnionB;
export type PatchableUnionPatch = PatchableUnionAPatch | PatchableUnionBPatch;

export function isPatchableUnion(value: unknown): value is PatchableUnion {
	return isPatchableUnionA(value) || isPatchableUnionB(value);
}

export function isPatchableUnionPatch(value: unknown): value is PatchableUnionPatch {
	return isPatchableUnionAPatch(value) || isPatchableUnionBPatch(value);
}

function isSupportedType(type: string): boolean {
	return type === 'union-a' || type === 'union-b';
}

export function PatchableUnionOrPatchFromJSON(value: Record<string, unknown>): PatchableUnion | PatchableUnionPatch {
	if (checkProp(value, '@type', isString)) {
		return isSupportedType(value['@type']) ? PatchableUnionFromJSON(value) : PatchableUnionPatchFromJSON(value);
	}
	throw new Error('No valid descriminator found');
}

export function PatchableUnionFromJSON(value: Record<string, unknown>): PatchableUnion {
	const descriminator = value['@type'];

	if (!isString(descriminator)) {
		throw new Error('No valid descriminator found');
	}
	switch (descriminator) {
		case 'union-a':
			return PatchableUnionAFromJSON(value);
		case 'union-b':
			return PatchableUnionBFromJSON(value);
		default:
			throw new Error(`Unknown descriminator "${descriminator}"`);
	}
}

export function PatchableUnionPatchFromJSON(value: Record<string, unknown>): PatchableUnionPatch {
	const descriminator = value['@type'];

	if (!isString(descriminator)) {
		throw new Error('No valid descriminator found');
	}
	switch (descriminator) {
		case 'patch:union-a':
			return PatchableUnionAPatchFromJSON(value);
		case 'patch:union-b':
			return PatchableUnionBPatchFromJSON(value);
		default:
			throw new Error(`Unknown descriminator "${descriminator}"`);
	}
}

export function PatchableUnionOrPatchToJSON(value: PatchableUnion | PatchableUnionPatch): Record<string, unknown> {
	return isPatchableUnion(value) ? PatchableUnionToJSON(value) : PatchableUnionPatchToJSON(value);
}

export function PatchableUnionToJSON(value: PatchableUnion): Record<string, unknown> {
	const $desc = value['@type'];
	switch ($desc) {
		case 'union-a':
			return PatchableUnionAToJSON(value);
		case 'union-b':
			return PatchableUnionBToJSON(value);
		default:
			throw new Error(`Unknown descriminator "${$desc}";`);
	}
}

export function PatchableUnionPatchToJSON(value: PatchableUnionPatch): Record<string, unknown> {
	const $desc = value['@type'];
	switch ($desc) {
		case 'patch:union-a':
			return PatchableUnionAPatchToJSON(value);
		case 'patch:union-b':
			return PatchableUnionBPatchToJSON(value);
		default:
			throw new Error(`Unknown descriminator "${$desc}";`);
	}
}
