import { expandToString } from "langium/generate";
import { Artifact } from "../artifact-generator.js";
import { JavaRestClientJDKGeneratorConfig, toPath } from "../java-gen-utils.js";

export function generateDTOUtils(artifactConfig: JavaRestClientJDKGeneratorConfig): Artifact {
    const packageName = `${artifactConfig.rootPackageName}.jdkhttp.impl.dto`;

    const content = expandToString`
        // Generated by RSD - Do not modify
        package ${packageName};

        import java.time.LocalDate;
        import java.time.LocalDateTime;
        import java.time.ZonedDateTime;
        import java.util.function.Function;

        import jakarta.json.JsonObject;

        class DTOUtils {
            public static boolean hasValue(JsonObject object, String property) {
                return object.containsKey(property) && ! object.isNull(property);
            }

            public static String mapString(JsonObject object, String property) {
                return object.getString(property);
            }

            public static String mapString(JsonObject object, String property, String defaultValue) {
                return object.getString(property, defaultValue);
            }

            public static boolean mapBoolean(JsonObject object, String property) {
                return object.getBoolean(property);
            }

            public static boolean mapBoolean(JsonObject object, String property, boolean defaultValue) {
                return object.getBoolean(property, defaultValue);
            }

            public static short mapShort(JsonObject object, String property) {
                return (short) object.getInt(property);
            }

            public static short mapShort(JsonObject object, String property, short defaultValue) {
                return (short) object.getInt(property, defaultValue);
            }

            public static int mapInt(JsonObject object, String property) {
                return object.getInt(property);
            }

            public static int mapInt(JsonObject object, String property, int defaultValue) {
                return object.getInt(property, defaultValue);
            }

            public static long mapLong(JsonObject object, String property) {
                return object.getJsonNumber(property).longValue();
            }

            public static long mapLong(JsonObject object, String property, long defaultValue) {
                return hasValue(object, property) ? mapLong(object, property) : defaultValue;
            }

            public static double mapDouble(JsonObject object, String property) {
                return object.getJsonNumber(property).doubleValue();
            }

            public static double mapDouble(JsonObject object, String property, double defaultValue) {
                return hasValue(object, property) ? mapDouble(object, property) : defaultValue;
            }

            public static float mapFloat(JsonObject object, String property) {
                return (float) object.getJsonNumber(property).doubleValue();
            }

            public static float mapFloat(JsonObject object, String property, float defaultValue) {
                return hasValue(object, property) ? mapFloat(object, property) : defaultValue;
            }

            public static <T> T mapLiteral(JsonObject object, String property, Function<String, T> converter) {
                return converter.apply(object.getString(property));
            }

            public static <T> T mapLiteral(JsonObject object, String property, Function<String, T> converter, T defaultValue) {
                return hasValue(object, property) ? mapLiteral(object, property, converter) : defaultValue;
            }

            public static LocalDate mapLocalDate(JsonObject object, String property) {
                return mapLiteral(object, property, LocalDate::parse);
            }

            public static LocalDate mapLocalDate(JsonObject object, String property, LocalDate defaultValue) {
                return mapLiteral(object, property, LocalDate::parse, defaultValue);
            }

            public static LocalDateTime mapLocalDateTime(JsonObject object, String property) {
                return mapLiteral(object, property, LocalDateTime::parse);
            }

            public static LocalDateTime mapLocalDateTime(JsonObject object, String property, LocalDateTime defaultValue) {
                return mapLiteral(object, property, LocalDateTime::parse, defaultValue);
            }

            public static ZonedDateTime mapZonedDateTime(JsonObject object, String property) {
                return mapLiteral(object, property, ZonedDateTime::parse);
            }

            public static ZonedDateTime mapZonedDateTime(JsonObject object, String property, ZonedDateTime defaultValue) {
                return mapLiteral(object, property, ZonedDateTime::parse, defaultValue);
            }
        }
    `;
    return {
        name: 'DTOUtils.java',
        content,
        path: toPath(artifactConfig.targetFolder, packageName)
    }

}