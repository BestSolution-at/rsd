import { CompositeGeneratorNode, NL, toString } from 'langium/generate';
import { Artifact } from '../artifact-generator.js';
import { JavaRestClientJDKGeneratorConfig, toPath } from '../java-gen-utils.js';
import { toNode } from '../util.js';

export function generateServiceUtils(
  artifactConfig: JavaRestClientJDKGeneratorConfig
): Artifact {
  const packageName = `${artifactConfig.rootPackageName}.jdkhttp.impl`;

  const compilationContent = new CompositeGeneratorNode();
  compilationContent.append(`// Generated by RSD - Do not modify`, NL);
  compilationContent.append(`package ${packageName};`, NL, NL);

  compilationContent.append(`import java.io.StringReader;`, NL);
  compilationContent.append(`import java.net.URLEncoder;`, NL);
  compilationContent.append(`import java.net.http.HttpResponse;`, NL);
  compilationContent.append(`import java.nio.charset.StandardCharsets;`, NL);
  compilationContent.append(`import java.time.LocalDate;`, NL);
  compilationContent.append(`import java.time.LocalDateTime;`, NL);
  compilationContent.append(`import java.time.ZonedDateTime;`, NL);
  compilationContent.append(`import java.util.List;`, NL);
  compilationContent.append(`import java.util.Map;`, NL);
  compilationContent.append(`import java.util.function.Function;`, NL);
  compilationContent.append(`import java.util.stream.Collectors;`, NL);
  compilationContent.append(`import java.util.stream.Stream;`, NL, NL);

  compilationContent.append(`import ${packageName}.model._JsonUtils;`, NL);
  compilationContent.append(`import jakarta.json.Json;`, NL);
  compilationContent.append(`import jakarta.json.JsonNumber;`, NL);
  compilationContent.append(`import jakarta.json.JsonObject;`, NL);
  compilationContent.append(`import jakarta.json.JsonString;`, NL);
  compilationContent.append(`import jakarta.json.JsonValue;`, NL, NL);
  compilationContent.append('public class ServiceUtils {', NL);
  const content = new CompositeGeneratorNode();
  content.append(
    toNode([
      'public static String toQueryString(Object value) {',
      [
        'if (value == null) {',
        ['return null;'],
        '}',
        'var text = _JsonUtils.toJsonString(value, false);',
        'return URLEncoder.encode(text, StandardCharsets.UTF_8);',
      ],
      '}',
    ]),
    NL
  );

  content.append(
    toNode([
      'private static String toQueryStringNoEncoding(Object value) {',
      [
        'if (value == null) {',
        ['return null;'],
        '}',
        'return value.toString();',
      ],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static String toQueryString(Number value) {',
      ['return toQueryStringNoEncoding(value);'],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static String toQueryString(LocalDate date) {',
      ['return toQueryStringNoEncoding(date);'],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static String toURLQueryPart(Map<String, String> data) {',
      [
        'var result = data.entrySet().stream()',
        [
          [
            '.map(e -> "%s=%s".formatted(e.getKey(), e.getValue()))',
            '.collect(Collectors.joining("&"));',
          ],
        ],
        'return result.isEmpty() ? "" : "?" + result;',
      ],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static String[] toHeaders(Map<String, String> data) {',
      [
        'return data.entrySet().stream()',
        [
          [
            '.flatMap(e -> Stream.of(e.getKey(), e.getValue()))',
            '.toArray(String[]::new);',
          ],
        ],
      ],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static <T> T mapObject(HttpResponse<String> response, Function<JsonObject, T> factory) {',
      [
        'var data = Json.createReader(new StringReader(response.body())).readObject();',
        'return factory.apply(data);',
      ],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static String mapString(HttpResponse<String> response) {',
      [
        'var b = response.body();',
        'if ("null".equals(b)) {',
        ['return null;'],
        '} else if (b.startsWith("\\"") && b.endsWith("\\"")) {',
        ['return b.substring(1, b.length() - 1);'],
        '}',
        'return response.body();',
      ],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static boolean mapBoolean(HttpResponse<String> response) {',
      ['return Boolean.parseBoolean(response.body());'],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static short mapShort(HttpResponse<String> response) {',
      ['return Short.parseShort(response.body());'],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static int mapInt(HttpResponse<String> response) {',
      ['return Integer.parseInt(response.body());'],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static long mapLong(HttpResponse<String> response) {',
      ['return Long.parseLong(response.body());'],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static double mapDouble(HttpResponse<String> response) {',
      ['return Double.parseDouble(response.body());'],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static float mapFloat(HttpResponse<String> response) {',
      ['return Float.parseFloat(response.body());'],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static <T> T mapLiteral(HttpResponse<String> response, Function<String, T> factory) {',
      ['return factory.apply(response.body());'],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static LocalDate mapLocalDate(HttpResponse<String> response) {',
      ['return mapLiteral(response, LocalDate::parse);'],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static LocalDateTime mapLocalDateTime(HttpResponse<String> response) {',
      ['return mapLiteral(response, LocalDateTime::parse);'],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static ZonedDateTime mapZonedDateTime(HttpResponse<String> response) {',
      ['return mapLiteral(response, ZonedDateTime::parse);'],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static <T> List<T> mapObjects(HttpResponse<String> response, Function<JsonObject, T> factory) {',
      [
        'var data = Json.createReader(new StringReader(response.body())).readArray();',
        'return data.getValuesAs(JsonObject.class)',
        [['.stream()', '.map(factory)', '.toList();']],
      ],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static List<String> mapStrings(HttpResponse<String> response) {',
      [
        'var data = Json.createReader(new StringReader(response.body())).readArray();',
        'return data.getValuesAs(JsonString.class)',
        [['.stream()', '.map(JsonString::getString)', '.toList();']],
      ],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static List<Boolean> mapBooleans(HttpResponse<String> response) {',
      [
        'var data = Json.createReader(new StringReader(response.body())).readArray();',
        'return data.getValuesAs(v -> v == JsonValue.TRUE)',
        [['.stream()', '.toList();']],
      ],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static List<Short> mapShorts(HttpResponse<String> response) {',
      [
        'var data = Json.createReader(new StringReader(response.body())).readArray();',
        'return data',
        [
          [
            '.getValuesAs(JsonNumber.class)',
            '.stream()',
            '.map(v -> v.numberValue().shortValue())',
            '.toList();',
          ],
        ],
      ],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static List<Integer> mapInts(HttpResponse<String> response) {',
      [
        'var data = Json.createReader(new StringReader(response.body())).readArray();',
        'return data',
        [
          [
            '.getValuesAs(JsonNumber.class)',
            '.stream()',
            '.map(v -> v.numberValue().intValue())',
            '.toList();',
          ],
        ],
      ],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static List<Long> mapLongs(HttpResponse<String> response) {',
      [
        'var data = Json.createReader(new StringReader(response.body())).readArray();',
        'return data',
        [
          [
            '.getValuesAs(JsonNumber.class)',
            '.stream()',
            '.map(v -> v.numberValue().longValue())',
            '.toList();',
          ],
        ],
      ],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static List<Double> mapDoubles(HttpResponse<String> response) {',
      [
        'var data = Json.createReader(new StringReader(response.body())).readArray();',
        'return data',
        [
          [
            '.getValuesAs(JsonNumber.class)',
            '.stream()',
            '.map(v -> v.numberValue().doubleValue())',
            '.toList();',
          ],
        ],
      ],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static List<Float> mapFloats(HttpResponse<String> response) {',
      [
        'var data = Json.createReader(new StringReader(response.body())).readArray();',
        'return data',
        [
          [
            '.getValuesAs(JsonNumber.class)',
            '.stream()',
            '.map(v -> v.numberValue().floatValue())',
            '.toList();',
          ],
        ],
      ],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static <T> List<T> mapLiterals(HttpResponse<String> response, Function<String, T> factory) {',
      ['return mapStrings(response).stream().map(factory).toList();'],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static List<LocalDate> mapLocalDates(HttpResponse<String> response) {',
      ['return mapLiterals(response, LocalDate::parse);'],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static List<LocalDateTime> mapLocalDateTimes(HttpResponse<String> response) {',
      ['return mapLiterals(response, LocalDateTime::parse);'],
      '}',
    ]),
    NL
  );
  content.append(
    toNode([
      'public static List<ZonedDateTime> mapZonedDateTimes(HttpResponse<String> response) {',
      ['return mapLiterals(response, ZonedDateTime::parse);'],
      '}',
    ])
  );
  compilationContent.indent((cBody) => cBody.append(content));
  compilationContent.append('}', NL);
  return {
    name: 'ServiceUtils.java',
    content: toString(compilationContent, '\t'),
    path: toPath(artifactConfig.targetFolder, packageName),
  };
}
