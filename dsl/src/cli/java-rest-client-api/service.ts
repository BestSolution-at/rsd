import { CompositeGeneratorNode, NL, toString } from "langium/generate";

import { Artifact } from "../artifact-generator.js";
import { JavaRestClientAPIGeneratorConfig, resolveObjectType, resolveType, toPath } from "../java-gen-utils.js";
import { MParameter, MReturnType, MService } from "../model.js";
import { toType } from "./shared.js";

export function generateService(s: MService, artifactConfig: JavaRestClientAPIGeneratorConfig): Artifact {
    const packageName = `${artifactConfig.rootPackageName}`;

    const node = new CompositeGeneratorNode()
    node.append('// Generated by RSD - Do not modify',NL)
    node.append(`package ${packageName};`, NL, NL)
    node.append(`public interface ${s.name}Service extends BaseService {`, NL)
    node.indent( child => {
        s.operations.forEach( o => {
            const parameters = o.parameters.map( p => toParameter(p, artifactConfig))
            child.append(`public ${toResultType(o.resultType, artifactConfig)} ${o.name}(${parameters.join(',')});`, NL)
        } )
    })    
    node.append('}')

    return {
        name: `${s.name}Service.java`,
        content: toString(node),
        path: toPath(artifactConfig.targetFolder, packageName)
    }
}

function toParameter(parameter: MParameter, artifactConfig: JavaRestClientAPIGeneratorConfig) {
    return `${toType(parameter, artifactConfig)} ${parameter.name}`;
}

function toResultType(type: MReturnType | undefined, artifactConfig: JavaRestClientAPIGeneratorConfig) {
    const dtoPkg = `${artifactConfig.rootPackageName}.dto`;
    if( type === undefined ) {
        return 'void'
    }

    if( type.variant === 'union' || type.variant === 'record' ) {
        if( type.array ) {
            return `java.util.List<${dtoPkg}.${type.type}DTO>`
        } else {
            return `${dtoPkg}.${type.type}DTO`
        }
    } else if( typeof type.type === 'string') {
        if( type.array ) {
            return `java.util.List<${resolveObjectType(type.type, artifactConfig.nativeTypeSubstitues)}>`
        } else {
            return `${resolveType(type.type, artifactConfig.nativeTypeSubstitues)}`;
        }
    }
    return type.type;
}