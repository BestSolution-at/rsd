import { CompositeGeneratorNode, NL, toString } from "langium/generate";

import { Artifact, ArtifactGenerationConfig } from "../artifact-generator.js";
import { JavaRestClientAPIGeneratorConfig, toPath } from "../java-gen-utils.js";
import { toFirstUpper } from "../util.js";

export function generateClient(generatorConfig: ArtifactGenerationConfig, artifactConfig: JavaRestClientAPIGeneratorConfig): Artifact {
    const packageName = `${artifactConfig.rootPackageName}`;

    const node = new CompositeGeneratorNode()
    node.append('// Generated by RSD - Do not modify',NL)
    node.append(`package ${packageName};`, NL, NL)
    node.append(`import ${artifactConfig.rootPackageName}.spi.${toFirstUpper(generatorConfig.name)}ClientFactory;`, NL)
    node.append(`import ${artifactConfig.rootPackageName}.dto.BaseDTO;`,NL)
    node.appendNewLine()

    node.append(`public interface ${toFirstUpper(generatorConfig.name)}Client {`, NL)
    node.indent( client => {
        client.append(`public static ${toFirstUpper(generatorConfig.name)}Client create(java.net.URI baseURL) {`,NL);
        client.indent( body => {
            body.append(`return java.util.ServiceLoader.load(${toFirstUpper(generatorConfig.name)}ClientFactory.class).iterator().next().create(baseURL);`, NL);
        })
        client.append('}',NL)
        client.append('public <T extends BaseDTO.Builder> T builder(Class<T> clazz);', NL)
        client.append('public <T extends BaseService> T service(Class<T> clazz);', NL)
    })

    node.append('}', NL)

    return {
        name: `${toFirstUpper(generatorConfig.name)}Client.java`,
        content: toString(node),
        path: toPath(artifactConfig.targetFolder, packageName)
    }
}